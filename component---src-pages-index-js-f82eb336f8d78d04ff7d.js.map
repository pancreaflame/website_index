{"version":3,"sources":["webpack:///./node_modules/@reach/tabs/node_modules/warning/warning.js","webpack:///./node_modules/@reach/auto-id/es/index.js","webpack:///./node_modules/@reach/tabs/es/index.js","webpack:///./src/components/organisms/TreeHome.js","webpack:///./src/pages/index.js","webpack:///./src/functions/buildTree.js"],"names":["warning","module","exports","serverHandoffComplete","genId","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","_ref","ref","children","_ref$as","as","Comp","onChange","_ref$index","index","controlledIndex","undefined","_ref$readOnly","readOnly","defaultIndex","props","isControlled","current","id","fallback","initialId","_useState","setId","_userInteractedRef","_selectedPanelRef","selectedIndex","setSelectedIndex","clones","Children","map","child","elementIsNullOrString","_id","_onFocusPanel","focus","_onSelectTab","createElement","displayName","_ref2","_ref2$as","onKeyDown","clonedProps","htmlProps","isSelected","_onSelect","handleKeyDown","event","enabledIndexes","disabled","filter","enabledSelectedIndex","nextIndex","count","_nextIndex","preventDefault","role","_ref3","forwardedRef","_ref3$as","rest","htmlType","type","ownRef","tabIndex","onClick","_ref4","_ref4$as","htmlAttrs","_ref5","_ref5$as","hidden","injectIntl","intl","tagObj","itemObj","category_id","aobj","cate_id","tagslist","treeResult","relations","countResult","item","node","split","datatag","parent_id","push","treeCount","assginCount","tree","newtree","allCount","sortedList","sort","a","b","forEach","buildTree","createTree","languages","currentLocale","language","className","allPathHome","lang","sep","nameList","name","to","x","cname","ename","data","allApTagCsv","edges","allApLinkCsv","navigate","location","SEO","title","formatMessage","description","host","site","siteMetadata","url","pathname","IndexQuery","allorphans","rel","orphans","findChildren","parentId","result","allPath","concat","BuildTree","relation","newRel","paths","join"],"mappings":"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","file":"component---src-pages-index-js-f82eb336f8d78d04ff7d.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nrequire(\"core-js/modules/es6.regexp.replace.js\");\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function warning() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;","/*\n * Let's see if we can make sense of why this hook exists and its\n * implementation.\n *\n * Some background:\n *   1. Accessibiliy APIs rely heavily on element IDs\n *   2. Requiring developers to put IDs on every element in Reach UI is both\n *      cumbersome and error-prone\n *   3. With a component model, we can generate IDs for them!\n *\n * Solution 1: Generate random IDs.\n *\n * This works great as long as you don't server render your app. When React (in\n * the client) tries to reuse the markup from the server, the IDs won't match\n * and React will then recreate the entire DOM tree.\n *\n * Solution 2: Increment an integer\n *\n * This sounds great. Since we're rendering the exact same tree on the server\n * and client, we can increment a counter and get a deterministic result between\n * client and server. Also, JS integers can go up to nine-quadrillion. I'm\n * pretty sure the tab will be closed before an app never needs\n * 10 quadrillion IDs!\n *\n * Problem solved, right?\n *\n * Ah, but there's a catch! React's concurrent rendering makes this approach\n * non-deterministic. While the client and server will end up with the same\n * elements in the end, depending on suspense boundaries (and possibly some user\n * input during the initial render) the incrementing integers won't always match\n * up.\n *\n * Solution 3: Don't use IDs at all on the server; patch after first render.\n *\n * What we've done here is solution 2 with some tricks. With this approach, the\n * ID returned is an empty string on the first render. This way the server and\n * client have the same markup no matter how wild the concurrent rendering may\n * have gotten.\n *\n * After the render, we patch up the components with an incremented ID. This\n * causes a double render on any components with `useId`. Shouldn't be a problem\n * since the components using this hook should be small, and we're only updating\n * the ID attribute on the DOM, nothing big is happening.\n *\n * It doesn't have to be an incremented number, though--we could do generate\n * random strings instead, but incrementing a number is probably the cheapest\n * thing we can do.\n *\n * Additionally, we only do this patchup on the very first client render ever.\n * Any calls to `useId` that happen dynamically in the client will be\n * populated immediately with a value. So, we only get the double render after\n * server hydration and never again, SO BACK OFF ALRIGHT?\n */\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nvar serverHandoffComplete = false;\nvar id = 0;\n\nvar genId = function genId() {\n  return ++id;\n};\n\nexport var useId = function useId(fallback) {\n  /*\n   * If this instance isn't part of the initial render, we don't have to do the\n   * double render/patch-up dance. We can just generate the ID and return it.\n   */\n  var initialId = fallback || (serverHandoffComplete ? genId() : null);\n\n  var _useState = useState(initialId),\n      id = _useState[0],\n      setId = _useState[1];\n\n  useLayoutEffect(function () {\n    if (id === null) {\n      /*\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\n       * rendering flicker, though it'll make the first render slower (unlikely\n       * to matter, but you're welcome to measure your app and let us know if\n       * it's a problem).\n       */\n      setId(genId());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(function () {\n    if (serverHandoffComplete === false) {\n      /*\n       * Flag all future uses of `useId` to skip the update dance. This is in\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\n       * accidentally bail out of the patch-up dance prematurely.\n       */\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id;\n};","import \"core-js/modules/es6.array.filter.js\";\nimport \"core-js/modules/es6.array.map.js\";\nimport \"core-js/modules/es6.array.index-of.js\";\nimport \"core-js/modules/web.dom.iterable.js\";\nimport \"core-js/modules/es6.array.iterator.js\";\nimport \"core-js/modules/es6.object.to-string.js\";\nimport \"core-js/modules/es6.object.keys.js\";\nimport \"core-js/modules/es6.object.assign.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { cloneElement, forwardRef, useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport warning from \"warning\";\nimport { checkStyles, wrapEvent, useUpdateEffect, makeId, useForkedRef } from \"@reach/utils\";\nimport { useId } from \"@reach/auto-id\"; ////////////////////////////////////////////////////////////////////////////////\n// Tabs\n\nexport var Tabs = forwardRef(function Tabs(_ref, ref) {\n  var children = _ref.children,\n      _ref$as = _ref.as,\n      Comp = _ref$as === void 0 ? \"div\" : _ref$as,\n      onChange = _ref.onChange,\n      _ref$index = _ref.index,\n      controlledIndex = _ref$index === void 0 ? undefined : _ref$index,\n      _ref$readOnly = _ref.readOnly,\n      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,\n      defaultIndex = _ref.defaultIndex,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"as\", \"onChange\", \"index\", \"readOnly\", \"defaultIndex\"]); // useRef because you shouldn't switch between controlled/uncontrolled\n\n\n  var _useRef = useRef(controlledIndex != null),\n      isControlled = _useRef.current;\n\n  process.env.NODE_ENV !== \"production\" ? warning(!(isControlled && controlledIndex == null), \"Tabs is changing from controlled to uncontrolled. Tabs should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.\") : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!(!isControlled && controlledIndex != null), \"Tabs is changing from uncontrolled to controlled. Tabs should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.\") : void 0;\n  var id = useId(props.id); // we only manage focus if the user caused the update vs.\n  // a new controlled index coming in\n\n  var _userInteractedRef = useRef(false);\n\n  var _selectedPanelRef = useRef(null);\n\n  var _useState = useState(defaultIndex || 0),\n      selectedIndex = _useState[0],\n      setSelectedIndex = _useState[1];\n\n  var clones = React.Children.map(children, function (child) {\n    if (elementIsNullOrString(child)) return child;\n    return cloneElement(child, {\n      selectedIndex: isControlled ? controlledIndex : selectedIndex,\n      _id: id,\n      _userInteractedRef: _userInteractedRef,\n      _selectedPanelRef: _selectedPanelRef,\n      _onFocusPanel: function _onFocusPanel() {\n        return _selectedPanelRef.current && _selectedPanelRef.current.focus();\n      },\n      _onSelectTab: readOnly ? function () {} : function (index) {\n        _userInteractedRef.current = true;\n        onChange && onChange(index);\n\n        if (!isControlled) {\n          setSelectedIndex(index);\n        }\n      }\n    });\n  });\n  useEffect(function () {\n    return checkStyles(\"tabs\");\n  }, []);\n  return React.createElement(Comp, _extends({\n    \"data-reach-tabs\": \"\",\n    ref: ref\n  }, props, {\n    children: clones\n  }));\n});\nTabs.displayName = \"Tabs\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  Tabs.propTypes = {\n    children: PropTypes.node.isRequired,\n    onChange: PropTypes.func,\n    index: function index(props, name, compName) {\n      if (props.index > -1 && props.onChange == null && props.readOnly !== true) {\n        return new Error(\"You provided a `value` prop to `Tabs` without an `onChange` handler. This will render a read-only tabs element. If the tabs should be mutable use `defaultIndex`. Otherwise, set `onChange`.\");\n      } else {\n        for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n          rest[_key - 3] = arguments[_key];\n        }\n\n        return PropTypes.number.apply(PropTypes, [name, props, compName].concat(rest));\n      }\n    },\n    defaultIndex: PropTypes.number\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n// TabList\n\n\nexport var TabList = forwardRef(function TabList(_ref2, ref) {\n  var children = _ref2.children,\n      _ref2$as = _ref2.as,\n      Comp = _ref2$as === void 0 ? \"div\" : _ref2$as,\n      onKeyDown = _ref2.onKeyDown,\n      clonedProps = _objectWithoutPropertiesLoose(_ref2, [\"children\", \"as\", \"onKeyDown\"]);\n\n  var selectedIndex = clonedProps.selectedIndex,\n      _onSelectTab = clonedProps._onSelectTab,\n      _userInteractedRef = clonedProps._userInteractedRef,\n      _onFocusPanel = clonedProps._onFocusPanel,\n      _selectedPanelRef = clonedProps._selectedPanelRef,\n      _id = clonedProps._id,\n      htmlProps = _objectWithoutPropertiesLoose(clonedProps, [\"selectedIndex\", \"_onSelectTab\", \"_userInteractedRef\", \"_onFocusPanel\", \"_selectedPanelRef\", \"_id\"]);\n\n  var clones = React.Children.map(children, function (child, index) {\n    if (elementIsNullOrString(child)) return child;\n    return cloneElement(child, {\n      isSelected: index === selectedIndex,\n      _id: makeId(_id, index),\n      _userInteractedRef: _userInteractedRef,\n      _onSelect: function _onSelect() {\n        return _onSelectTab(index);\n      }\n    });\n  });\n  var handleKeyDown = wrapEvent(onKeyDown, function (event) {\n    var enabledIndexes = React.Children.map(children, function (child, index) {\n      return child.props.disabled === true ? null : index;\n    }).filter(function (index) {\n      return index != null;\n    }); // looks something like: [0, 2, 3, 5]\n\n    var enabledSelectedIndex = enabledIndexes.indexOf(selectedIndex);\n\n    switch (event.key) {\n      case \"ArrowRight\":\n        {\n          var nextEnabledIndex = (enabledSelectedIndex + 1) % enabledIndexes.length;\n          var nextIndex = enabledIndexes[nextEnabledIndex];\n\n          _onSelectTab(nextIndex);\n\n          break;\n        }\n\n      case \"ArrowLeft\":\n        {\n          var count = enabledIndexes.length;\n\n          var _nextEnabledIndex = (enabledSelectedIndex - 1 + count) % count;\n\n          var _nextIndex = enabledIndexes[_nextEnabledIndex];\n\n          _onSelectTab(_nextIndex);\n\n          break;\n        }\n\n      case \"ArrowDown\":\n        {\n          // don't scroll down\n          event.preventDefault();\n\n          _onFocusPanel();\n\n          break;\n        }\n\n      case \"Home\":\n        {\n          _onSelectTab(0);\n\n          break;\n        }\n\n      case \"End\":\n        {\n          _onSelectTab(React.Children.count(children) - 1);\n\n          break;\n        }\n\n      default:\n        {}\n    }\n  });\n  return React.createElement(Comp, _extends({\n    \"data-reach-tab-list\": \"\",\n    ref: ref,\n    role: \"tablist\",\n    onKeyDown: handleKeyDown,\n    children: clones\n  }, htmlProps));\n});\nTabList.displayName = \"TabList\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  TabList.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n// Tab\n\n\nexport var Tab = forwardRef(function Tab(_ref3, forwardedRef) {\n  var children = _ref3.children,\n      _ref3$as = _ref3.as,\n      Comp = _ref3$as === void 0 ? \"button\" : _ref3$as,\n      rest = _objectWithoutPropertiesLoose(_ref3, [\"children\", \"as\"]);\n\n  var isSelected = rest.isSelected,\n      _userInteractedRef = rest._userInteractedRef,\n      _onSelect = rest._onSelect,\n      _id = rest._id,\n      htmlProps = _objectWithoutPropertiesLoose(rest, [\"isSelected\", \"_userInteractedRef\", \"_onSelect\", \"_id\"]);\n\n  var htmlType = Comp === \"button\" && htmlProps.type == null ? \"button\" : undefined;\n  var ownRef = useRef(null);\n  var ref = useForkedRef(forwardedRef, ownRef);\n  useUpdateEffect(function () {\n    if (isSelected && ownRef.current && _userInteractedRef.current) {\n      _userInteractedRef.current = false;\n      ownRef.current.focus();\n    }\n  }, [isSelected]);\n  return React.createElement(Comp, _extends({\n    \"data-reach-tab\": \"\",\n    ref: ref,\n    role: \"tab\",\n    id: makeId(\"tab\", _id),\n    tabIndex: isSelected ? 0 : -1,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeId(\"panel\", _id),\n    \"data-selected\": isSelected ? \"\" : undefined,\n    onClick: _onSelect,\n    children: children,\n    type: htmlType\n  }, htmlProps));\n});\nTab.displayName = \"Tab\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  Tab.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n// TabPanels\n\n\nexport var TabPanels = forwardRef(function TabPanels(_ref4, forwardedRef) {\n  var children = _ref4.children,\n      _ref4$as = _ref4.as,\n      Comp = _ref4$as === void 0 ? \"div\" : _ref4$as,\n      rest = _objectWithoutPropertiesLoose(_ref4, [\"children\", \"as\"]);\n\n  var selectedIndex = rest.selectedIndex,\n      _selectedPanelRef = rest._selectedPanelRef,\n      _userInteractedRef = rest._userInteractedRef,\n      _onFocusPanel = rest._onFocusPanel,\n      _onSelectTab = rest._onSelectTab,\n      _id = rest._id,\n      htmlAttrs = _objectWithoutPropertiesLoose(rest, [\"selectedIndex\", \"_selectedPanelRef\", \"_userInteractedRef\", \"_onFocusPanel\", \"_onSelectTab\", \"_id\"]);\n\n  var clones = React.Children.map(children, function (child, index) {\n    if (elementIsNullOrString(child)) return child;\n    return cloneElement(child, {\n      isSelected: index === selectedIndex,\n      _selectedPanelRef: _selectedPanelRef,\n      _id: makeId(_id, index)\n    });\n  });\n  return React.createElement(Comp, _extends({\n    \"data-reach-tab-panels\": \"\",\n    ref: forwardedRef\n  }, htmlAttrs, {\n    children: clones\n  }));\n});\nTabPanels.displayName = \"TabPanels\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  TabPanels.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n// TabPanel\n\n\nexport var TabPanel = forwardRef(function TabPanel(_ref5, forwardedRef) {\n  var children = _ref5.children,\n      _ref5$as = _ref5.as,\n      Comp = _ref5$as === void 0 ? \"div\" : _ref5$as,\n      rest = _objectWithoutPropertiesLoose(_ref5, [\"children\", \"as\"]);\n\n  var isSelected = rest.isSelected,\n      _selectedPanelRef = rest._selectedPanelRef,\n      _id = rest._id,\n      htmlProps = _objectWithoutPropertiesLoose(rest, [\"isSelected\", \"_selectedPanelRef\", \"_id\"]);\n\n  var ref = useForkedRef(forwardedRef, isSelected ? _selectedPanelRef : null);\n  return React.createElement(Comp, _extends({\n    \"data-reach-tab-panel\": \"\",\n    ref: ref,\n    role: \"tabpanel\",\n    tabIndex: -1,\n    \"aria-labelledby\": makeId(\"tab\", _id),\n    hidden: !isSelected,\n    id: makeId(\"panel\", _id),\n    children: children\n  }, htmlProps));\n});\nTabPanel.displayName = \"TabPanel\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  TabPanel.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n// Check children before cloning to ignore strings or null values\n\n\nfunction elementIsNullOrString(child) {\n  return !child || typeof child.type === \"string\";\n}","import React from \"react\"\nimport { injectIntl, IntlContextConsumer, Link } from \"gatsby-plugin-intl\"\n\nimport buildTree from \"../../functions/buildTree\"\n\nconst createTree = (cate_id, tagslist, itemObj) => {\n  let relations = []\n  let countResult = {}\n  let treeResult = {}\n\n  // Count\n  itemObj\n    .filter(item => item.node[`${cate_id}_tag_ids`] !== \"\")\n    .map(item => {\n      item.node[`${cate_id}_tag_ids`].split(\";\").map(datatag => {\n        if (countResult[datatag]) {\n          countResult[datatag]++\n        } else {\n          countResult[datatag] = 1\n        }\n        return 0\n      })\n      return 0\n    })\n\n  // Relation\n  tagslist\n    .filter(item => item.node.category_id === cate_id)\n    .map(item => {\n      let aobj = {}\n      if (item.node.parent_id) {\n        aobj[item.node.id] = item.node.parent_id\n      } else {\n        aobj[item.node.id] = null\n      }\n      relations.push(aobj)\n      return 0\n    })\n\n  // console.log(`${cate_id}, ${JSON.stringify(relations)}`)\n\n  // Tree\n  treeResult = buildTree(relations)\n\n  const assginCount = (tree, id, count) => {\n    let newtree = {}\n\n    if (Object.keys(tree).length === 0) {\n      newtree[\"count\"] = count[id] || 0\n    } else {\n      // Sum the count\n      let allCount = 0\n      Object.keys(tree).map(item => {\n        let aobj = assginCount(tree[item], item, count)\n        allCount = allCount + aobj[\"count\"]\n        newtree[item] = aobj\n        return 0\n      })\n\n      // Sort the keys by count\n      let sortedList = {}\n      Object.keys(newtree)\n        .sort((a, b) => newtree[b][\"count\"] - newtree[a][\"count\"])\n        .forEach(key => {\n          sortedList[key] = newtree[key]\n        })\n      newtree = sortedList\n      newtree[\"count\"] = allCount + (count[id] || 0)\n    }\n\n    return newtree\n  }\n\n  // Assign count\n  let treeCount = assginCount(treeResult.tree, \"root\", countResult)\n\n  return {\n    treeResult,\n    countResult,\n    treeCount,\n  }\n}\n\nconst allPathHome = (itemObj, tree, cate_id, tagObj, lang, sep) => {\n  return Object.keys(tree).map((item, index) => {\n    if (tree[item][\"count\"]) {\n      // i18n\n      let nameList = tagObj.filter(name => name.node.id === item)\n      let name = item\n      if (nameList.length) {\n        name = nameList[0][\"node\"][lang]\n      }\n\n      return (\n        <li key={index} className=\"tree_item\">\n          <div className=\"tree_list_cont\">\n            <h4 className=\"tree_heading\">\n              <Link to={`/${cate_id}/${item}`} className=\"tree_link\">\n                {name}\n              </Link>\n              <span className=\"tree_link_text\">{tree[item].count}</span>\n            </h4>\n          </div>\n          {Object.keys(tree[item]) ? (\n            <ul>\n              {allPathHome(\n                itemObj,\n                tree[item],\n                cate_id,\n                tagObj,\n                lang,\n                sep + \">\"\n              )}\n            </ul>\n          ) : null}\n          <ul>\n            {itemObj &&\n              itemObj\n                .filter(x => {\n                  return x.node[`${cate_id}_tag_ids`].indexOf(item) !== -1\n                })\n                .map((x, i) => {\n                  return (\n                    <li key={i} className=\"tree_heading\">\n                      {\n                        <Link\n                          to={`/link/${x.node.id}`}\n                          className=\"tree_item_link\"\n                        >\n                          {lang === \"zh\"\n                            ? x.node.cname || x.node.ename\n                            : x.node.ename || x.node.cname}\n                        </Link>\n                      }\n                    </li>\n                  )\n                })}\n          </ul>\n        </li>\n      )\n    } else {\n      return null\n    }\n  })\n}\n\nconst TreeHome = ({ intl, tagObj, itemObj, category_id }) => {\n  // const item = pageContext.item\n  // const categoryObj = data.allApCategoryCsv.edges\n  // const tagObj = data.allApTagCsv.edges\n\n  let aobj = createTree(category_id, tagObj, itemObj)\n\n  return (\n    <IntlContextConsumer>\n      {({ languages, language: currentLocale }) => (\n        <div className=\"tree_home_cont\">\n          <ul>\n            {allPathHome(\n              itemObj,\n              aobj.treeCount,\n              category_id,\n              tagObj,\n              currentLocale,\n              \">\"\n            )}\n          </ul>\n        </div>\n      )}\n    </IntlContextConsumer>\n  )\n}\n\nexport default injectIntl(TreeHome)\n","import React from \"react\"\nimport { Location } from \"@reach/router\"\nimport { graphql } from \"gatsby\"\nimport { injectIntl, IntlContextConsumer, Link } from \"gatsby-plugin-intl\"\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\"\n// import { FaSearch } from \"react-icons/fa\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/atoms/SEO\"\nimport TreeHome from \"../components/organisms/TreeHome\"\n\nimport \"@reach/tabs/styles.css\"\nimport \"./index.css\"\n\nconst IndexPage = ({ intl, data }) => {\n  const tagObj = data.allApTagCsv.edges\n  const itemObj = data.allApLinkCsv.edges\n\n  return (\n    <Layout>\n      <IntlContextConsumer>\n        {({ languages, language: currentLocale }) => (\n          <>\n            <Location>\n              {({ navigate, location }) => (\n                <>\n                  <SEO\n                    title={intl.formatMessage({ id: \"common.home\" })}\n                    description={intl.formatMessage({ id: \"common.home\" })}\n                    host={data.site.siteMetadata.host}\n                    url={location.pathname}\n                  />\n                </>\n              )}\n            </Location>\n\n            {/* <div className=\"search_cont\">\n              <input type=\"text\" placeholder=\"Search\" />\n              <button onClick={() => {}}>\n                <FaSearch />\n              </button>\n            </div> */}\n\n            {/* <div>higlights/popular</div> */}\n\n            <Tabs>\n              <TabList>\n                <Tab>\n                  <span className=\"tab_badge\">\n                    {intl.formatMessage({ id: \"index.by\" })}\n                  </span>\n                  {intl.formatMessage({ id: \"index.maincate\" })}\n                </Tab>\n                <Tab>\n                  <span className=\"tab_badge\">\n                    {intl.formatMessage({ id: \"index.by\" })}\n                  </span>\n                  {intl.formatMessage({ id: \"index.media\" })}\n                </Tab>\n                <Tab>\n                  <span className=\"tab_badge\">\n                    {intl.formatMessage({ id: \"index.by\" })}\n                  </span>\n                  {intl.formatMessage({ id: \"index.subject\" })}\n                </Tab>\n                <Tab>\n                  <span className=\"tab_badge\">\n                    {intl.formatMessage({ id: \"index.by\" })}\n                  </span>\n                  {intl.formatMessage({ id: \"index.all\" })}\n                </Tab>\n              </TabList>\n\n              <TabPanels>\n                <TabPanel>\n                  <TreeHome\n                    category_id={\"maincategory\"}\n                    tagObj={tagObj}\n                    itemObj={itemObj}\n                  />\n                </TabPanel>\n                <TabPanel>\n                  <TreeHome\n                    category_id={\"media\"}\n                    tagObj={tagObj}\n                    itemObj={itemObj}\n                  />\n                </TabPanel>\n                <TabPanel>\n                  <TreeHome\n                    category_id={\"subject\"}\n                    tagObj={tagObj}\n                    itemObj={itemObj}\n                  />\n                </TabPanel>\n                <TabPanel>\n                  <div className=\"home_all_cont\">\n                    <ul className=\"home_all_list\">\n                      {itemObj &&\n                        itemObj.map((item, index) => {\n                          return (\n                            <li key={index} className=\"home_all_item\">\n                              <p>\n                                <Link\n                                  to={`/link/${item.node.id}`}\n                                  className=\"home_all_link\"\n                                >\n                                  <span>\n                                    {currentLocale === \"zh\"\n                                      ? item.node.cname || item.node.ename\n                                      : item.node.ename || item.node.cname}\n                                  </span>\n                                </Link>\n                              </p>\n                            </li>\n                          )\n                        })}\n                    </ul>\n                  </div>\n                </TabPanel>\n              </TabPanels>\n            </Tabs>\n          </>\n        )}\n      </IntlContextConsumer>\n    </Layout>\n  )\n}\n\nexport default injectIntl(IndexPage)\n\nexport const IndexQuery = graphql`\n  query {\n    allApLinkCsv {\n      edges {\n        node {\n          id\n          cname\n          ename\n          description\n          url\n          subject_tag_ids\n          maincategory_tag_ids\n          publicity_tag_ids\n          media_tag_ids\n          tool_tag_ids\n          stage_tag_ids\n          state_tag_ids\n          license_tag_ids\n          promotional_article\n          dev_team\n          founded_time\n          source\n          added_time\n          added_by\n        }\n      }\n    }\n    allApTagCsv {\n      edges {\n        node {\n          id\n          parent_id\n          category_id\n          zh\n          en\n          icon\n          example\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        host\n      }\n    }\n  }\n`\n","const findChildren = (parentId, rel, sep) => {\n  let result = {}\n\n  rel.map(item => {\n    Object.keys(item).map(key => {\n      if (parentId === item[key]) {\n        result[key] = findChildren(key, rel, sep + \">\")\n      }\n      return 0\n    })\n    return 0\n  })\n  return result\n}\n\nconst allorphans = rel => {\n  let orphans = {}\n  let tree = {}\n\n  // store all nodes\n  rel.map(item => {\n    Object.keys(item).map(key => {\n      // console.log(`key: ${key} val: ${item[key]}`)\n      if (key && !orphans[key]) {\n        orphans[key] = []\n      }\n      if (item[key] && !orphans[item[key]]) {\n        orphans[item[key]] = []\n      }\n      return 0\n    })\n    return 0\n  })\n\n  // find those no more parent (top level)\n  rel.map(item => {\n    Object.keys(item).map(key => {\n      if (!item[key]) {\n        tree[key] = findChildren(key, rel, \">\")\n      }\n      return 0\n    })\n    return 0\n  })\n\n  // loop all the tree to create path to node\n  const allPath = (tree, parent_id) => {\n    Object.keys(tree).map(item => {\n      if (orphans[parent_id]) {\n        orphans[item] = orphans[item].concat(orphans[parent_id])\n        orphans[item] = orphans[item].concat([parent_id])\n      }\n\n      allPath(tree[item], item)\n      return 0\n    })\n    return 0\n  }\n\n  allPath(tree, \"root\")\n\n  return {\n    tree,\n    orphans,\n  }\n}\n\nconst BuildTree = relation => {\n  let newRel = allorphans(relation)\n  let paths = {}\n\n  Object.keys(newRel.orphans).map(item => {\n    paths[item] = newRel.orphans[item].join(\".\")\n    return 0\n  })\n\n  return {\n    tree: newRel.tree,\n    paths,\n  }\n}\n\nexport default BuildTree\n"],"sourceRoot":""}