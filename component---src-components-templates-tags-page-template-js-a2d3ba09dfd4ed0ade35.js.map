{"version":3,"sources":["webpack:///./src/functions/buildTree.js","webpack:///./src/components/templates/generalPageTemplate.js","webpack:///./src/components/organisms/Tree.js","webpack:///./src/components/molecules/Item.js","webpack:///./src/components/organisms/ItemList.js","webpack:///./src/components/templates/tagsPageTemplate.js"],"names":["allorphans","rel","orphans","tree","map","item","Object","keys","key","findChildren","parentId","sep","result","allPath","parent_id","concat","BuildTree","relation","newRel","paths","join","PageTemplate","title","children","data","pageTitle","className","navigate","location","description","host","site","siteMetadata","url","pathname","siteTitle","injectIntl","intl","tagObj","itemObj","category_id","aobj","cate_id","tagslist","treeResult","relations","countResult","filter","node","split","datatag","id","push","treeCount","assginCount","count","newtree","length","allCount","sortedList","sort","a","b","forEach","buildTree","createTree","languages","currentLocale","language","formatMessage","lang","index","nameList","name","to","props","cname","ename","pageContext","allApTagCsv","edges","allApLinkCsv","filteredItemObj","value","indexOf","zh","en","TagsPageQuery"],"mappings":"uIAeMA,EAAa,SAAAC,GACjB,IAAIC,EAAU,GACVC,EAAO,GAGXF,EAAIG,KAAI,SAAAC,GAWN,OAVAC,OAAOC,KAAKF,GAAMD,KAAI,SAAAI,GAQpB,OANIA,IAAQN,EAAQM,KAClBN,EAAQM,GAAO,IAEbH,EAAKG,KAASN,EAAQG,EAAKG,MAC7BN,EAAQG,EAAKG,IAAQ,IAEhB,KAEF,KAITP,EAAIG,KAAI,SAAAC,GAON,OANAC,OAAOC,KAAKF,GAAMD,KAAI,SAAAI,GAIpB,OAHKH,EAAKG,KACRL,EAAKK,GAtCQ,SAAfC,EAAgBC,EAAUT,EAAKU,GACnC,IAAIC,EAAS,GAWb,OATAX,EAAIG,KAAI,SAAAC,GAON,OANAC,OAAOC,KAAKF,GAAMD,KAAI,SAAAI,GAIpB,OAHIE,IAAaL,EAAKG,KACpBI,EAAOJ,GAAOC,EAAaD,EAAKP,EAAKU,EAAM,MAEtC,KAEF,KAEFC,EA0BWH,CAAaD,EAAKP,EAAK,MAE9B,KAEF,KAmBT,OAfgB,SAAVY,EAAWV,EAAMW,GAUrB,OATAR,OAAOC,KAAKJ,GAAMC,KAAI,SAAAC,GAOpB,OANIH,EAAQY,KACVZ,EAAQG,GAAQH,EAAQG,GAAMU,OAAOb,EAAQY,IAC7CZ,EAAQG,GAAQH,EAAQG,GAAMU,OAAO,CAACD,KAGxCD,EAAQV,EAAKE,GAAOA,GACb,KAEF,EAGTQ,CAAQV,EAAM,QAEP,CACLA,OACAD,YAmBWc,IAfG,SAAAC,GAChB,IAAIC,EAASlB,EAAWiB,GACpBE,EAAQ,GAOZ,OALAb,OAAOC,KAAKW,EAAOhB,SAASE,KAAI,SAAAC,GAE9B,OADAc,EAAMd,GAAQa,EAAOhB,QAAQG,GAAMe,KAAK,KACjC,KAGF,CACLjB,KAAMe,EAAOf,KACbgB,W,kCC9EJ,qHAOe,SAASE,EAAT,GAAkD,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAChDC,EAAYH,EAAWA,EAAN,MAAmB,GAE1C,OACE,yBAAKI,UAAU,8BACb,kBAAC,WAAD,MACG,cAAGC,SAAH,IAAaC,EAAb,EAAaA,SAAb,OACC,oCACE,kBAAC,IAAD,CACEN,MAAOG,EACPI,YAAaJ,EACbK,KAAMN,EAAKO,KAAKC,aAAaF,KAC7BG,IAAKL,EAASM,eAKtB,kBAAC,IAAD,CAAQC,UAAWX,EAAKO,KAAKC,aAAaV,QAC1C,yBAAKI,UAAU,IACb,yBAAKA,UAAU,sCACb,6BAAMH,KAGV,kBAAC,IAAD,S,wJC2GSa,wBAvBF,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAKjCC,EAlHa,SAACC,EAASC,EAAUJ,GACrC,IAEIK,EAFAC,EAAY,GACZC,EAAc,GAIlBP,EACGQ,QAAO,SAAA1C,GAAI,MAAwC,KAApCA,EAAK2C,KAAQN,EAAb,eACftC,KAAI,SAAAC,GASH,OARAA,EAAK2C,KAAQN,EAAb,YAAgCO,MAAM,KAAK7C,KAAI,SAAA8C,GAM7C,OALIJ,EAAYI,GACdJ,EAAYI,KAEZJ,EAAYI,GAAW,EAElB,KAEF,KAIXP,EACGI,QAAO,SAAA1C,GAAI,OAAIA,EAAK2C,KAAKR,cAAgBE,KACzCtC,KAAI,SAAAC,GACH,IAAIoC,EAAO,GAOX,OANIpC,EAAK2C,KAAKlC,UACZ2B,EAAKpC,EAAK2C,KAAKG,IAAM9C,EAAK2C,KAAKlC,UAE/B2B,EAAKpC,EAAK2C,KAAKG,IAAM,KAEvBN,EAAUO,KAAKX,GACR,KAQX,IA8BIY,EA9BgB,SAAdC,EAAenD,EAAMgD,EAAII,GAC7B,IAAIC,EAAU,GAEd,GAAiC,IAA7BlD,OAAOC,KAAKJ,GAAMsD,OACpBD,EAAO,MAAYD,EAAMJ,IAAO,MAC3B,CAEL,IAAIO,EAAW,EACfpD,OAAOC,KAAKJ,GAAMC,KAAI,SAAAC,GACpB,IAAIoC,EAAOa,EAAYnD,EAAKE,GAAOA,EAAMkD,GAGzC,OAFAG,GAAsBjB,EAAI,MAC1Be,EAAQnD,GAAQoC,EACT,KAIT,IAAIkB,EAAa,GACjBrD,OAAOC,KAAKiD,GACTI,MAAK,SAACC,EAAGC,GAAJ,OAAUN,EAAQM,GAAR,MAAsBN,EAAQK,GAAR,SACrCE,SAAQ,SAAAvD,GACPmD,EAAWnD,GAAOgD,EAAQhD,OAE9BgD,EAAUG,GACH,MAAYD,GAAYH,EAAMJ,IAAO,GAG9C,OAAOK,EAIOF,EAhChBV,EAAaoB,YAAUnB,IAgCgB1C,KAAM,OAAQ2C,GAErD,MAAO,CACLF,aACAE,cACAO,aAwCSY,CAAWzB,EAAaF,EAAQC,GAE3C,OACE,kBAAC,sBAAD,MACG,cAAG2B,UAAH,IAAwBC,EAAxB,EAAcC,SAAd,OACC,yBAAK1C,UAAU,iBACb,wBAAIA,UAAU,oBACXW,EAAKgC,cAAc,CAAElB,GAAI,yBAE5B,4BA7CM,SAAVtC,EAAWV,EAAMuC,EAASJ,EAAQgC,EAAM3D,GAC5C,OAAOL,OAAOC,KAAKJ,GAAMC,KAAI,SAACC,EAAMkE,GAClC,GAAIpE,EAAKE,GAAL,MAAqB,CAEvB,IAAImE,EAAWlC,EAAOS,QAAO,SAAA0B,GAAI,OAAIA,EAAKzB,KAAKG,KAAO9C,KAClDoE,EAAOpE,EAKX,OAJImE,EAASf,SACXgB,EAAOD,EAAS,GAAT,KAAoBF,IAI3B,wBAAI9D,IAAK+D,EAAO7C,UAAU,aACxB,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,gBACZ,kBAAC,OAAD,CAAMgD,GAAE,IAAMhC,EAAN,IAAiBrC,EAAQqB,UAAU,aACxC+C,GAEH,0BAAM/C,UAAU,kBAAkBvB,EAAKE,GAAMkD,SAGhDjD,OAAOC,KAAKJ,EAAKE,IAChB,4BAAKQ,EAAQV,EAAKE,GAAOqC,EAASJ,EAAQgC,EAAM3D,EAAM,MACpD,MAIR,OAAO,QAoBAE,CAAQ4B,EAAKY,UAAWb,EAAaF,EAAQ6B,EAAe,aCzG1D/B,G,UAAAA,sBArBF,SAAAuC,GACX,OACE,kBAAC,sBAAD,MACG,cAAGT,UAAH,IAAwBC,EAAxB,EAAcC,SAAd,OACC,6BACE,kBAAC,OAAD,CAAMM,GAAE,SAAWC,EAAMxB,IACvB,4BACqB,OAAlBgB,EACGQ,EAAMC,OAASD,EAAME,MACrBF,EAAME,OAASF,EAAMC,QAG7B,2BAAID,EAAM9C,aAEV,qCCKKO,wBAjBE,SAAC,GAA+C,EAA7CC,KAA6C,EAAvCG,YAAuC,EAA1BW,GAA0B,EAAtBb,OAAuB,IAAfC,EAAc,EAAdA,QACjD,OACE,kBAAC,sBAAD,MACG,cAAG2B,UAAH,EAAcE,SAAd,OACC,6BACE,4BACG7B,GACCA,EAAQnC,KAAI,SAACC,EAAMkE,GACjB,OAAO,kBAAC,EAAD,eAAM/D,IAAK+D,GAAWlE,EAAK2C,kB,YCblD,8CA2CeZ,gCApCU,SAAC,GAAiC,IAA/B0C,EAA8B,EAA9BA,YAAmBtD,GAAW,EAAjBa,KAAiB,EAAXb,MACvCnB,EAAOyE,EAAYzE,KACnBiC,EAASd,EAAKuD,YAAYC,MAC1BzC,EAAUf,EAAKyD,aAAaD,MAC5BE,EAAkB3C,EAAQQ,QAAO,SAAAoC,GACrC,OAAuE,IAAhEA,EAAMnC,KAAQ3C,EAAKmC,YAAnB,YAA0C4C,QAAQ/E,EAAK8C,OAGhE,OACE,kBAAC,IAAD,CAAqB7B,MAAOjB,EAAKgF,GAAK,IAAMhF,EAAKiF,GAAI9D,KAAMA,GACzD,kBAAC,sBAAD,MACG,cAAG0C,UAAH,EAAcE,SAAd,OACC,yBAAK1C,UAAU,gBACb,kBAAC,EAAD,CACEc,YAAanC,EAAKmC,YAClBF,OAAQA,EACRC,QAASA,IAEX,yBAAKb,UAAU,mBACb,2BAAIrB,EAAKmC,aACT,4BAAKnC,EAAKgF,IACV,2BAAIhF,EAAKiF,IACT,kBAAC,EAAD,CACE9C,YAAanC,EAAKmC,YAClBW,GAAI9C,EAAK8C,GACTb,OAAQA,EACRC,QAAS2C,aA1BzB,IAsCaK,EAAa","file":"component---src-components-templates-tags-page-template-js-a2d3ba09dfd4ed0ade35.js","sourcesContent":["const findChildren = (parentId, rel, sep) => {\n  let result = {}\n\n  rel.map(item => {\n    Object.keys(item).map(key => {\n      if (parentId === item[key]) {\n        result[key] = findChildren(key, rel, sep + \">\")\n      }\n      return 0\n    })\n    return 0\n  })\n  return result\n}\n\nconst allorphans = rel => {\n  let orphans = {}\n  let tree = {}\n\n  // store all nodes\n  rel.map(item => {\n    Object.keys(item).map(key => {\n      // console.log(`key: ${key} val: ${item[key]}`)\n      if (key && !orphans[key]) {\n        orphans[key] = []\n      }\n      if (item[key] && !orphans[item[key]]) {\n        orphans[item[key]] = []\n      }\n      return 0\n    })\n    return 0\n  })\n\n  // find those no more parent (top level)\n  rel.map(item => {\n    Object.keys(item).map(key => {\n      if (!item[key]) {\n        tree[key] = findChildren(key, rel, \">\")\n      }\n      return 0\n    })\n    return 0\n  })\n\n  // loop all the tree to create path to node\n  const allPath = (tree, parent_id) => {\n    Object.keys(tree).map(item => {\n      if (orphans[parent_id]) {\n        orphans[item] = orphans[item].concat(orphans[parent_id])\n        orphans[item] = orphans[item].concat([parent_id])\n      }\n\n      allPath(tree[item], item)\n      return 0\n    })\n    return 0\n  }\n\n  allPath(tree, \"root\")\n\n  return {\n    tree,\n    orphans,\n  }\n}\n\nconst BuildTree = relation => {\n  let newRel = allorphans(relation)\n  let paths = {}\n\n  Object.keys(newRel.orphans).map(item => {\n    paths[item] = newRel.orphans[item].join(\".\")\n    return 0\n  })\n\n  return {\n    tree: newRel.tree,\n    paths,\n  }\n}\n\nexport default BuildTree\n","import React from \"react\"\nimport { Location } from \"@reach/router\"\nimport Footer from \"../organisms/Footer\"\nimport Header from \"../organisms/Header\"\nimport SEO from \"../atoms/SEO\"\nimport \"../../pages/index.css\"\n\nexport default function PageTemplate({ title, children, data }) {\n  const pageTitle = title ? `${title} - ` : \"\"\n\n  return (\n    <div className=\"general d-flex flex-column\">\n      <Location>\n        {({ navigate, location }) => (\n          <>\n            <SEO\n              title={pageTitle}\n              description={pageTitle}\n              host={data.site.siteMetadata.host}\n              url={location.pathname}\n            />\n          </>\n        )}\n      </Location>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div className=\"\">\n        <div className=\"container text-page-container pb-2\">\n          <div>{children}</div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  )\n}\n","import React from \"react\"\nimport { injectIntl, IntlContextConsumer, Link } from \"gatsby-plugin-intl\"\n\nimport buildTree from \"../../functions/buildTree\"\n\nconst createTree = (cate_id, tagslist, itemObj) => {\n  let relations = []\n  let countResult = {}\n  let treeResult = {}\n\n  // Count\n  itemObj\n    .filter(item => item.node[`${cate_id}_tag_ids`] !== \"\")\n    .map(item => {\n      item.node[`${cate_id}_tag_ids`].split(\";\").map(datatag => {\n        if (countResult[datatag]) {\n          countResult[datatag]++\n        } else {\n          countResult[datatag] = 1\n        }\n        return 0\n      })\n      return 0\n    })\n\n  // Relation\n  tagslist\n    .filter(item => item.node.category_id === cate_id)\n    .map(item => {\n      let aobj = {}\n      if (item.node.parent_id) {\n        aobj[item.node.id] = item.node.parent_id\n      } else {\n        aobj[item.node.id] = null\n      }\n      relations.push(aobj)\n      return 0\n    })\n\n  // console.log(`${cate_id}, ${JSON.stringify(relations)}`)\n\n  // Tree\n  treeResult = buildTree(relations)\n\n  const assginCount = (tree, id, count) => {\n    let newtree = {}\n\n    if (Object.keys(tree).length === 0) {\n      newtree[\"count\"] = count[id] || 0\n    } else {\n      // Sum the count\n      let allCount = 0\n      Object.keys(tree).map(item => {\n        let aobj = assginCount(tree[item], item, count)\n        allCount = allCount + aobj[\"count\"]\n        newtree[item] = aobj\n        return 0\n      })\n\n      // Sort the keys by count\n      let sortedList = {}\n      Object.keys(newtree)\n        .sort((a, b) => newtree[b][\"count\"] - newtree[a][\"count\"])\n        .forEach(key => {\n          sortedList[key] = newtree[key]\n        })\n      newtree = sortedList\n      newtree[\"count\"] = allCount + (count[id] || 0)\n    }\n\n    return newtree\n  }\n\n  // Assign count\n  let treeCount = assginCount(treeResult.tree, \"root\", countResult)\n\n  return {\n    treeResult,\n    countResult,\n    treeCount,\n  }\n}\n\nconst allPath = (tree, cate_id, tagObj, lang, sep) => {\n  return Object.keys(tree).map((item, index) => {\n    if (tree[item][\"count\"]) {\n      // i18n\n      let nameList = tagObj.filter(name => name.node.id === item)\n      let name = item\n      if (nameList.length) {\n        name = nameList[0][\"node\"][lang]\n      }\n\n      return (\n        <li key={index} className=\"tree_item\">\n          <div className=\"tree_list_cont\">\n            <h4 className=\"tree_heading\">\n              <Link to={`/${cate_id}/${item}`} className=\"tree_link\">\n                {name}\n              </Link>\n              <span className=\"tree_link_text\">{tree[item].count}</span>\n            </h4>\n          </div>\n          {Object.keys(tree[item]) ? (\n            <ul>{allPath(tree[item], cate_id, tagObj, lang, sep + \">\")}</ul>\n          ) : null}\n        </li>\n      )\n    } else {\n      return null\n    }\n  })\n}\n\nconst Tree = ({ intl, tagObj, itemObj, category_id }) => {\n  // const item = pageContext.item\n  // const categoryObj = data.allApCategoryCsv.edges\n  // const tagObj = data.allApTagCsv.edges\n\n  let aobj = createTree(category_id, tagObj, itemObj)\n\n  return (\n    <IntlContextConsumer>\n      {({ languages, language: currentLocale }) => (\n        <div className=\"tree_nav_cont\">\n          <h4 className=\"tree_nav_heading\">\n            {intl.formatMessage({ id: \"menu.classification\" })}\n          </h4>\n          <ul>\n            {allPath(aobj.treeCount, category_id, tagObj, currentLocale, \">\")}\n          </ul>\n        </div>\n      )}\n    </IntlContextConsumer>\n  )\n}\n\nexport default injectIntl(Tree)\n","import React from \"react\"\nimport { injectIntl, IntlContextConsumer, Link } from \"gatsby-plugin-intl\"\n\nconst Item = props => {\n  return (\n    <IntlContextConsumer>\n      {({ languages, language: currentLocale }) => (\n        <div>\n          <Link to={`/link/${props.id}`}>\n            <h4>\n              {currentLocale === \"zh\"\n                ? props.cname || props.ename\n                : props.ename || props.cname}\n            </h4>\n          </Link>\n          <p>{props.description}</p>\n          {/* <p>{JSON.stringify(props)}</p> */}\n          <hr />\n        </div>\n      )}\n    </IntlContextConsumer>\n  )\n}\n\nexport default injectIntl(Item)\n","import React from \"react\"\nimport { injectIntl, IntlContextConsumer } from \"gatsby-plugin-intl\"\n\nimport Item from \"../molecules/Item\"\n\nconst ItemList = ({ intl, category_id, id, tagObj, itemObj }) => {\n  return (\n    <IntlContextConsumer>\n      {({ languages, language: currentLocale }) => (\n        <div>\n          <ul>\n            {itemObj &&\n              itemObj.map((item, index) => {\n                return <Item key={index} {...item.node} />\n              })}\n          </ul>\n        </div>\n      )}\n    </IntlContextConsumer>\n  )\n}\n\nexport default injectIntl(ItemList)\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { injectIntl, IntlContextConsumer } from \"gatsby-plugin-intl\"\nimport Tree from \"../organisms/Tree\"\nimport ItemList from \"../organisms/ItemList\"\nimport GeneralPageTemplate from \"./generalPageTemplate\"\n\nconst TagsPageTemplate = ({ pageContext, intl, data }) => {\n  const item = pageContext.item\n  const tagObj = data.allApTagCsv.edges\n  const itemObj = data.allApLinkCsv.edges\n  const filteredItemObj = itemObj.filter(value => {\n    return value.node[`${item.category_id}_tag_ids`].indexOf(item.id) !== -1\n  })\n\n  return (\n    <GeneralPageTemplate title={item.zh + \" \" + item.en} data={data}>\n      <IntlContextConsumer>\n        {({ languages, language: currentLocale }) => (\n          <div className=\"tagpage_cont\">\n            <Tree\n              category_id={item.category_id}\n              tagObj={tagObj}\n              itemObj={itemObj}\n            />\n            <div className=\"tagpage_content\">\n              <p>{item.category_id}</p>\n              <h2>{item.zh}</h2>\n              <p>{item.en}</p>\n              <ItemList\n                category_id={item.category_id}\n                id={item.id}\n                tagObj={tagObj}\n                itemObj={filteredItemObj}\n              />\n            </div>\n          </div>\n        )}\n      </IntlContextConsumer>\n    </GeneralPageTemplate>\n  )\n}\n\nexport default injectIntl(TagsPageTemplate)\n\nexport const TagsPageQuery = graphql`\n  query {\n    allApCategoryCsv {\n      edges {\n        node {\n          id\n          zh\n          en\n          abbr\n        }\n      }\n    }\n    allApTagCsv {\n      edges {\n        node {\n          id\n          parent_id\n          category_id\n          zh\n          en\n          icon\n          example\n        }\n      }\n    }\n    allApLinkCsv {\n      edges {\n        node {\n          id\n          cname\n          ename\n          description\n          url\n          subject_tag_ids\n          maincategory_tag_ids\n          publicity_tag_ids\n          media_tag_ids\n          tool_tag_ids\n          stage_tag_ids\n          state_tag_ids\n          license_tag_ids\n          promotional_article\n          dev_team\n          founded_time\n          source\n          added_time\n          added_by\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        host\n      }\n    }\n  }\n`\n"],"sourceRoot":""}